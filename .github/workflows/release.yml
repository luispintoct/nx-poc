name: CI

on:
  push:
    tags: ["release-*"]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.affected-projects.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable Corepack
        run: corepack enable

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --immutable

      - name: Get latest production release
        id: latest-prod-release
        run: |
          latest-prod-release=$(git describe --abbrev=0 --match="production-release" 2>/dev/null || echo "")
          if [ -z "$latest-prod-release" ]; then
            latest-prod-release=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "base=$latest-prod-release" >> $GITHUB_OUTPUT

      - name: Get affected projects
        id: affected-projects
        run: |
          projects=$(yarn nx show projects --affected --base=${{ steps.latest-prod-release.outputs.base }} --json)
          echo "projects=$projects" >> $GITHUB_OUTPUT
  
  candidate:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Deploy candidates
        run: |
          projects=${{ fromJSON( needs.prepare.outputs.projects ) }}
          for project in $projects; do
            version=$(yarn node ./bin/release/utils/read-version $project)
            dir=$(yarn nx show project $project --json | jq .root)
            if [ -z "$version" ]; then continue; fi
            if [ ! -f "$dir/package.json" ]; then continue; fi
            yarn node ./bin/release/utils/update-version $project $version-${{ github.sha }}
            yarn workspace $project npm publish --tag=rc
          done
          git restore

      - name: Run e2e (against candidates)
        run: |
          # install cli globally
          npm i -g @commercetools/cli@$version-${{ github.sha }}
          # log cli version
          commercetools --version
          # run tests
          yarn nx run @commercetools-cli/e2e:run

  # production:
  #   runs-on: ubuntu-latest
  #   needs: candidate
  #   environment: Production
  #   steps:
  #     - name: Checkout code
  #     uses: actions/checkout@v4
  #           # aprovals
  #           - name: publish production
  #           run: |
  #             projects=$(yarn nx show projects --affected)
  #             for project in $projects; do
  #               # publish
  #             done
  #         - name: update production release tag
  #           run: |
  #             git tag "prodction-release" ${{ github.sha }}
  #             git push --tags
  #         - name: run e2e against prodction
  #           run: yarn nx run @commercetools-cli/e2e:run
    