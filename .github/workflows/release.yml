name: Release

on:
  push:
    tags: ["release-*"]

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.affected-projects.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Get latest production release
        id: latest-prod-release
        run: |
          latest_prod_release=$(git describe --abbrev=0 --match="production-release" 2>/dev/null || echo "")
          if [ -z "$latest_prod_release" ]; then
            latest_prod_release=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "base=$latest_prod_release" >> $GITHUB_OUTPUT

      - name: Get affected projects
        id: affected-projects
        run: |
          projects=$(yarn nx show projects --affected --base=${{ steps.latest-prod-release.outputs.base }} --json)
          echo "projects=$projects" >> $GITHUB_OUTPUT
  
  candidate:
    runs-on: ubuntu-latest
    needs: prepare
    environment: Development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Build
        run: yarn nx run-many -t build

      - name: Add npm tokens to .yarnrc
        run: |
          yarn config set npmScopes.commercetools.npmAuthToken ${{ secrets. NPM_TOKEN }}
          yarn config set npmScopes.commercetools-cli.npmAuthToken ${{ secrets. NPM_TOKEN }}

      - name: Deploy candidates
        run: |
          projects='${{ needs.prepare.outputs.projects }}'
          echo $projects | jq -r '.[]' | while read -r project; do
            version="$(yarn ts-node ./bin/project/read-version.ts $project)-$(./bin/release/get-version-hash)"
            yarn ts-node ./bin/project/update-version.ts "$project" "$version"
          done
          echo $projects | jq -r '.[]' | while read -r project; do
            version="$(yarn ts-node ./bin/project/read-version.ts $project)"
            dir=$(yarn nx show project $project --json | jq -r '.root')
            if [ ! -f "$dir/package.json" ]; then
              continue;
            fi
            if jq -e '.private == true' <<< $(cat $dir/package.json) >/dev/null; then
              continue;
            fi
            if [[ $(yarn npm info $project --json | jq ".versions | map(. == \"$version\") | any // false") == "true" ]]; then
              echo "::warning::Project $project@$version already exists"
              continue;
            fi
            yarn workspace $project npm publish --tag=dev
          done

      - name: Run e2e (against candidates)
        run: |
          # Install cli globally
          npm i -g @commercetools/cli
          # Log cli version
          commercetools --version
          # Run tests
          yarn nx run @commercetools-cli/e2e:run

  production:
    runs-on: ubuntu-latest
    needs: [prepare, candidate]
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GH_TOKEN }}

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Build
        run: yarn nx run-many -t build

      - name: Add npm tokens to .yarnrc
        run: |
          yarn config set npmScopes.commercetools.npmAuthToken ${{ secrets. NPM_TOKEN }}
          yarn config set npmScopes.commercetools-cli.npmAuthToken ${{ secrets. NPM_TOKEN }}

      - name: Deploy
        run: |
          projects='${{ needs.prepare.outputs.projects }}'
          echo $projects | jq -r '.[]' | while read -r project; do
            version="$(yarn ts-node ./bin/project/read-version.ts $project)"
            dir=$(yarn nx show project $project --json | jq -r '.root')
            if [ ! -f "$dir/package.json" ]; then
              continue;
            fi
            if jq -e '.private == true' <<< $(cat $dir/package.json) >/dev/null; then
              continue;
            fi
            if [[ $(yarn npm info $project --json | jq ".versions | map(. == \"$version\") | any // false") == "true" ]]; then
              echo "::warning::Project $project@$version already exists"
              continue;
            fi
            yarn workspace $project npm publish
          done
          git tag production-release --force
          git push origin production-release --force

      - name: Run e2e
        run: |
          # install cli globally
          npm i -g @commercetools/cli
          # log cli version
          commercetools --version
          # run tests
          yarn nx run @commercetools-cli/e2e:run
