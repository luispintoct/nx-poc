name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    branches: [main]
    types: [checks_requested]

jobs:
  # Enforce conventional commits
  commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Ensure commits format
        if: github.event_name == 'pull_request'
        run: yarn commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Ensure commits format
        if: github.event_name == 'merge_group'
        run: yarn commitlint --from ${{ github.event.merge_group.base_sha }} --to ${{ github.event.merge_group.head_sha }} --verbose

  # Enforce linter
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      # https://opensource.google/documentation/reference/thirdparty/oneversion
      - name: Ensure code style
        run: | 
          yarn eslint $(git diff --name-only --diff-filter=ACMRTUXB main | grep -E "(.js$|.ts$|.json$)")
  
  # Dependencies audit
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: npm audit
        run: yarn workspaces foreach --all npm audit

  # Enforce one version rule
  one-version-rule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      # https://opensource.google/documentation/reference/thirdparty/oneversion
      - name: Ensure the one version rule
        run: yarn one-version check

  # Build project and detect affected projects
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Generate affected projects matrix
        id: generate-matrix
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            base=$(./bin/release/get-latest)
          else
            base=origin/main
          fi
          projects=$(yarn nx show projects --base=$base --affected --json)
          echo "matrix=$projects" >> $GITHUB_OUTPUT

  # Run tests for the affected projects
  test:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.matrix != '[]'
    strategy:
      matrix:
        project: ${{ fromJSON(needs.build.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Test Project
        run: yarn nx test ${{ matrix.project }}

  # https://github.com/orgs/community/discussions/26822#discussioncomment-3305794
  test-result:
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - run: |
          result=${{ needs.test.result }}
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi

  # Evaluates if there is release commit and enforce rules
  evaluate-release:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.set-output.outputs.is_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # get the list of commits if pull-request
      - id: pr-commits
        if: github.event_name == 'pull_request'
        run: |
          commits=$(curl -sSL "${{ github.event.pull_request.commits_url }}" | jq -c '[.[].commit]')
          echo "commits=$commits"
          echo "commits=$commits" >> $GITHUB_OUTPUT

      # get the list of commits if merge-queue
      - id: mg-commits
        if: github.event_name == 'merge_group'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=$(echo "${{ github.ref }}" | grep -oE 'pr-[0-9]+' | tr -d 'pr-')
          commits=$(gh pr view $pr_number --repo ${{github.repository}} --json commits | jq -c '.commits')
          echo "commits=$commits"
          echo "commits=$commits" >> $GITHUB_OUTPUT

      # check if is a release pull-request
      - name: evaluate
        id: set-output
        run: |
          # Extract messages from commits
          commits='${{ steps.pr-commits.outputs.commits || steps.mg-commits.outputs.commits || toJson(github.event.commits) }}'
          commit_messages=$(echo $commits | jq -r '[.[].message // .[].messageHeadline]')
          commit_messages_len=$(echo $commit_messages | jq 'length')

          # Check if release and fail if multiple commits found
          is_release=$(echo $commit_messages | jq '. | map(startswith("release:")) | any')
          if [[ $is_release == 'true' && $commit_messages_len -gt 1 ]]; then
            echo "::error::Multiple commits found, but there's a release commit. Only one commit is allowed if there's a release commit."
            exit 1
          fi
          echo "is_release=false" >> $GITHUB_OUTPUT
      
      # check if is a release pull-request
      - name: enforce release up-to-date
        if: github.event_name != 'push' && steps.set-output.outputs.is_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            # Get the commit hash of the latest commit on the branch:
            head_commit=${{github.event.pull_request.head.sha}}
          else
            pr_number=$(echo "${{ github.ref }}" | grep -oE 'pr-[0-9]+' | tr -d 'pr-')
            head_commit=$(gh pr view $pr_number --repo ${{github.repository}} --json headRefOid | jq -c '.headRefOid')
          fi
          echo "head_commit=$head_commit"

          # Get the commit hash of the latest commit on the main branch:
          main_branch_commit=$(git rev-parse origin/main)
          echo "main_branch_commit=$main_branch_commit"
          
          # Find the last commit that the branches have in common:
          common_commit=$(git merge-base origin/main $head_commit)
          echo "common_commit=$common_commit"
          
          # Compare the commit hashes
          if [ "$common_commit" != "$main_branch_commit" ]; then
              echo "::error::The release PR is not up-to-date with main."
              exit 1
          fi

  # Creates the release pull-request
  create-release-pr:
    runs-on: ubuntu-latest
    environment: Development
    needs: [build, evaluate-release]
    if: |
      github.event_name == 'push' &&
      needs.evaluate-release.outputs['is_release'] == 'false' &&
      needs.build.outputs.matrix != '[]'
    env:
      GH_TOKEN: ${{ secrets.RELEASE_GH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_GH_TOKEN }}
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Create Release PR
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B release ${{ github.sha }}
          git reset --hard ${{ github.sha }}

          latest_release=$(./bin/release/get-latest)
          projects=$(yarn nx show projects --base="$latest_release" --affected)

          for project in $projects; do
            yarn ts-node ./bin/project/bump-version.ts "$latest_release" ${{ github.sha }} "$project"
            yarn ts-node ./bin/project/generate-changelog.ts "$latest_release" ${{ github.sha }} "$project"
          done

          release_version=$(./bin/release/generate-version ${{ github.sha }})
          git add . && git commit -m "release: $release_version"
          git push --force origin release

          project_list=$(echo $projects | tr ' ' ',' | sed 's/,$//')
          pr_body=$(yarn ts-node ./bin/release/generate-pr-body.ts "$latest_release" ${{ github.sha }} "$release_version" "$project_list")
          gh pr create --base main --head release --title "Release $release_version" --body "$pr_body" ||
          gh pr edit -B release --base main --title "Release $release_version" --body "$pr_body"

  # Creates the tag to trigger a new release
  create-release-tag:
    runs-on: ubuntu-latest
    environment: Development
    needs: evaluate-release
    if: |
      github.event_name == 'push' &&
      needs.evaluate-release.outputs['is_release'] == 'true'
    steps:
      - name: create release tag
        run: |
          release_version=$(./bin/release/generate-version ${{ github.sha }})
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "release-$release_version" -m "Release Tag $release_version" ${{ github.sha }}
          git push origin "release-$release_version"
